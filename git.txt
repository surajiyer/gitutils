# URL(s) to git cheatsheets:
# https://medium.freecodecamp.org/git-cheat-sheet-and-best-practices-c6ce5321f52

# Delete a file/directory already commited and pushed
git rm -r --cached <dir_name>
git commit -m 'Remove the now ignored directory.'
git push origin master

# To delete a file/directory from all commits
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <dir-or-file-path>' --prune-empty --tag-name-filter cat -- --all

# To copy files from one branch to another without merging
git checkout <branch-to-copy>
git checkout <branch-from-copy> <file-path>
(Optional) git commit -m 'Add file <filename> to <branch-name>.'

# .gitignore everything in current folder
[^.]*

# Delete latest commit. This also deletes the changes.
git reset --hard HEAD~1

# Delete latest commit without delete any of the changes.
git reset --soft HEAD~1

# Delete some commit in the past
git reset --hard <sha1-commit-id>

# If you already pushed it, you will need to do a force push to get rid of it...
git push origin HEAD --force

# Check all commits: commits will come with message and a hash
git log

# Edit some historical commit and force push changes
git checkout <commit hash>
git push -f origin master

# Delete remote branch
git remote rm origin

# See remote repository urls
git remote -v

# Add remote repository urls as origin
git remote add origin <url>
git remote set-url origin <url>

# See list of branches
git branch

# Create branch
git branch <name>

# Checkout branch
git checkout <name>

# Create new branch and checkout to it in one line
git checkout -b <name>

# To merge branch <a> into <b>
git checkout <b>
git merge <a>

# Pull changes for specific branch
git pull origin <branch>

# To delete a branch locally
git branch -D <branch>

# To delete a branch remotely
git push origin --delete <branch>

# To rename a branch locally
git checkout <old-branch-name>
git branch -m <new-branch-name>
OR
git branch -m <old-branch-name> <new-branch-name>

# To rename a branch remotely
# First delete the old branch and push the new one to remote
# Then reset the upstream branch in the new local branch
git push origin :old-branch-name new-branch-name
git push origin -u new-branch-name

# To directly reset

# See which files have changed
git status

# See how much each files have been changed
git diff

# Merge last 4 commits into one commit (will open editor to merge)
# Discard commit message by changing "pick" to "fixup"
# Leave "pick" to retain commit message
git rebase -i HEAD~4

# List all files changed in a given commit
git diff-tree --no-commit-id --name-only -r <commit hash>

# Updating local feature branch before merging to master branch
# Bring your feature branch up to date with master. Deploying from Git branches adds flexibility. Bring your branch up to date with master and deploy it to make sure everything works. If everything looks good the branch can be merged. Otherwise, you can deploy your master branch to return production to its stable state.
https://gist.github.com/santisbon/a1a60db1fb8eecd1beeacd986ae5d3ca

# perform garbage collection in your repository and prune old objects
git gc --aggressive --prune

# How to compare two files not in repo using git
git diff --no-index file1.txt file2.txt

# Pull all branches in one go
# https://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches
git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
git fetch --all
git pull --all
